//
// Created by Yanliang Li on 9/3/24.
//
#include "FlyingEdgesAlgorithm.h"

// Definition of device constants and arrays
__constant__ unsigned char numTris[256] = {
        0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2,
        1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
        1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
        2, 3, 3, 2, 3, 4, 4, 3, 3, 4, 4, 3, 4, 5, 5, 2,
        1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
        2, 3, 3, 4, 3, 4, 2, 3, 3, 4, 4, 5, 4, 5, 3, 2,
        3, 4, 4, 3, 4, 5, 3, 2, 4, 5, 5, 4, 5, 2, 4, 1,
        1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
        2, 3, 3, 4, 3, 4, 4, 5, 3, 2, 4, 3, 4, 3, 5, 2,
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
        3, 4, 4, 3, 4, 5, 5, 4, 4, 3, 5, 2, 5, 4, 2, 1,
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 2, 3, 3, 2,
        3, 4, 4, 5, 4, 5, 5, 2, 4, 3, 5, 4, 3, 2, 4, 1,
        3, 4, 4, 5, 4, 5, 3, 4, 4, 5, 5, 2, 3, 4, 2, 1,
        2, 3, 3, 2, 3, 4, 2, 1, 3, 2, 4, 1, 2, 1, 1, 0
};
__constant__ bool isCut[256][12] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
        {1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
        {0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0},
        {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1},
        {1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1},
        {0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1},
        {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
        {1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0},
        {1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0},
        {0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0},
        {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1},
        {1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1},
        {1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
        {0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0},
        {1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0},
        {1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0},
        {0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
        {0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1},
        {1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1},
        {1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1},
        {0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1},
        {0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0},
        {1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0},
        {1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0},
        {0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0},
        {0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1},
        {1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1},
        {1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1},
        {0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
        {0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0},
        {1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0},
        {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
        {0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0},
        {0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1},
        {1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1},
        {1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1},
        {0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
        {0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0},
        {1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0},
        {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0},
        {0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0},
        {0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1},
        {1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1},
        {1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1},
        {0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1},
        {0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0},
        {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
        {1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0},
        {0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
        {0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1},
        {1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
        {1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1},
        {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1},
        {0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0},
        {1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0},
        {1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0},
        {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0},
        {0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1},
        {1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1},
        {1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1},
        {0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1},
        {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1},
        {1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1},
        {0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1},
        {0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0},
        {1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0},
        {1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0},
        {0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0},
        {0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1},
        {1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1},
        {1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1},
        {0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1},
        {0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0},
        {1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0},
        {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0},
        {0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0},
        {0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1},
        {1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1},
        {1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1},
        {0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1},
        {0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0},
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
        {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0},
        {0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0},
        {0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1},
        {1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1},
        {0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0},
        {1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0},
        {1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
        {0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0},
        {0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1},
        {1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1},
        {1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1},
        {0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1},
        {0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0},
        {1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0},
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
        {0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0},
        {0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1},
        {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1},
        {0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1},
        {0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0},
        {1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0},
        {1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1},
        {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1},
        {1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1},
        {0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
        {0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0},
        {1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0},
        {1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0},
        {0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0},
        {0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1},
        {1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1},
        {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1},
        {0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1},
        {0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0},
        {1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0},
        {1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0},
        {1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0},
        {1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0},
        {0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0},
        {0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1},
        {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1},
        {1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1},
        {0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1},
        {0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0},
        {1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0},
        {1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0},
        {0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0},
        {0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
        {1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1},
        {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1},
        {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1},
        {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0},
        {1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0},
        {1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0},
        {0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0},
        {0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1},
        {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1},
        {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1},
        {0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1},
        {0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0},
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
        {1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0},
        {0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0},
        {0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1},
        {1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1},
        {0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1},
        {0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0},
        {1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
        {1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0},
        {0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0},
        {0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1},
        {0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1},
        {0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0},
        {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0},
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
        {0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0},
        {0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1},
        {1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1},
        {1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1},
        {0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1},
        {0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0},
        {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0},
        {1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0},
        {0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0},
        {0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1},
        {1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1},
        {1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1},
        {0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1},
        {0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0},
        {1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0},
        {1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0},
        {0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0},
        {0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1},
        {1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1},
        {1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1},
        {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1},
        {1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1},
        {1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1},
        {0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1},
        {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0},
        {1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0},
        {1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0},
        {0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0},
        {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1},
        {1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1},
        {1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
        {0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1},
        {0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
        {1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0},
        {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0},
        {0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1},
        {1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1},
        {1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1},
        {0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1},
        {0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0},
        {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0},
        {1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0},
        {0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0},
        {0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
        {1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1},
        {0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1},
        {0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0},
        {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
        {1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0},
        {0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
        {1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1},
        {1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1},
        {0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1},
        {0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0},
        {1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0},
        {1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0},
        {0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0},
        {0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1},
        {1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1},
        {1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1},
        {0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1},
        {0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
        {1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0},
        {1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
        {1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1},
        {1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1},
        {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1},
        {0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0},
        {1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0},
        {1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0},
        {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
        {0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1},
        {1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1},
        {1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1},
        {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0},
        {1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
        {1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};
__constant__ char caseTriangles[256][16] = {
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  3,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  9,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  3,  8,  9,  1,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  11, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  3,  8,  1,  11, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  11, 2,  0,  9,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2,  3,  8,  2,  8,  11, 11, 8,  9,  -1, -1, -1, -1, -1, -1, -1},
        {3,  2,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  2,  10, 8,  0,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  0,  9,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  10, 1,  10, 9,  9,  10, 8,  -1, -1, -1, -1, -1, -1, -1},
        {3,  1,  11, 10, 3,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  1,  11, 0,  11, 8,  8,  11, 10, -1, -1, -1, -1, -1, -1, -1},
        {3,  0,  9,  3,  9,  10, 10, 9,  11, -1, -1, -1, -1, -1, -1, -1},
        {9,  11, 8,  11, 10, 8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  8,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  0,  3,  7,  4,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  9,  1,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  9,  1,  4,  1,  7,  7,  1,  3,  -1, -1, -1, -1, -1, -1, -1},
        {1,  11, 2,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  7,  4,  3,  4,  0,  1,  11, 2,  -1, -1, -1, -1, -1, -1, -1},
        {9,  11, 2,  9,  2,  0,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1},
        {2,  9,  11, 2,  7,  9,  2,  3,  7,  7,  4,  9,  -1, -1, -1, -1},
        {8,  7,  4,  3,  2,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {10, 7,  4,  10, 4,  2,  2,  4,  0,  -1, -1, -1, -1, -1, -1, -1},
        {9,  1,  0,  8,  7,  4,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1},
        {4,  10, 7,  9,  10, 4,  9,  2,  10, 9,  1,  2,  -1, -1, -1, -1},
        {3,  1,  11, 3,  11, 10, 7,  4,  8,  -1, -1, -1, -1, -1, -1, -1},
        {1,  11, 10, 1,  10, 4,  1,  4,  0,  7,  4,  10, -1, -1, -1, -1},
        {4,  8,  7,  9,  10, 0,  9,  11, 10, 10, 3,  0,  -1, -1, -1, -1},
        {4,  10, 7,  4,  9,  10, 9,  11, 10, -1, -1, -1, -1, -1, -1, -1},
        {9,  4,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  4,  5,  0,  3,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  4,  5,  1,  0,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8,  4,  5,  8,  5,  3,  3,  5,  1,  -1, -1, -1, -1, -1, -1, -1},
        {1,  11, 2,  9,  4,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  8,  0,  1,  11, 2,  4,  5,  9,  -1, -1, -1, -1, -1, -1, -1},
        {5,  11, 2,  5,  2,  4,  4,  2,  0,  -1, -1, -1, -1, -1, -1, -1},
        {2,  5,  11, 3,  5,  2,  3,  4,  5,  3,  8,  4,  -1, -1, -1, -1},
        {9,  4,  5,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  2,  10, 0,  10, 8,  4,  5,  9,  -1, -1, -1, -1, -1, -1, -1},
        {0,  4,  5,  0,  5,  1,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1},
        {2,  5,  1,  2,  8,  5,  2,  10, 8,  4,  5,  8,  -1, -1, -1, -1},
        {11, 10, 3,  11, 3,  1,  9,  4,  5,  -1, -1, -1, -1, -1, -1, -1},
        {4,  5,  9,  0,  1,  8,  8,  1,  11, 8,  11, 10, -1, -1, -1, -1},
        {5,  0,  4,  5,  10, 0,  5,  11, 10, 10, 3,  0,  -1, -1, -1, -1},
        {5,  8,  4,  5,  11, 8,  11, 10, 8,  -1, -1, -1, -1, -1, -1, -1},
        {9,  8,  7,  5,  9,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  0,  3,  9,  3,  5,  5,  3,  7,  -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  7,  0,  7,  1,  1,  7,  5,  -1, -1, -1, -1, -1, -1, -1},
        {1,  3,  5,  3,  7,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  8,  7,  9,  7,  5,  11, 2,  1,  -1, -1, -1, -1, -1, -1, -1},
        {11, 2,  1,  9,  0,  5,  5,  0,  3,  5,  3,  7,  -1, -1, -1, -1},
        {8,  2,  0,  8,  5,  2,  8,  7,  5,  11, 2,  5,  -1, -1, -1, -1},
        {2,  5,  11, 2,  3,  5,  3,  7,  5,  -1, -1, -1, -1, -1, -1, -1},
        {7,  5,  9,  7,  9,  8,  3,  2,  10, -1, -1, -1, -1, -1, -1, -1},
        {9,  7,  5,  9,  2,  7,  9,  0,  2,  2,  10, 7,  -1, -1, -1, -1},
        {2,  10, 3,  0,  8,  1,  1,  8,  7,  1,  7,  5,  -1, -1, -1, -1},
        {10, 1,  2,  10, 7,  1,  7,  5,  1,  -1, -1, -1, -1, -1, -1, -1},
        {9,  8,  5,  8,  7,  5,  11, 3,  1,  11, 10, 3,  -1, -1, -1, -1},
        {5,  0,  7,  5,  9,  0,  7,  0,  10, 1,  11, 0,  10, 0,  11, -1},
        {10, 0,  11, 10, 3,  0,  11, 0,  5,  8,  7,  0,  5,  0,  7,  -1},
        {10, 5,  11, 7,  5,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {11, 5,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  3,  8,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  1,  0,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  3,  8,  1,  8,  9,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1},
        {1,  5,  6,  2,  1,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  5,  6,  1,  6,  2,  3,  8,  0,  -1, -1, -1, -1, -1, -1, -1},
        {9,  5,  6,  9,  6,  0,  0,  6,  2,  -1, -1, -1, -1, -1, -1, -1},
        {5,  8,  9,  5,  2,  8,  5,  6,  2,  3,  8,  2,  -1, -1, -1, -1},
        {2,  10, 3,  11, 5,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {10, 8,  0,  10, 0,  2,  11, 5,  6,  -1, -1, -1, -1, -1, -1, -1},
        {0,  9,  1,  2,  10, 3,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1},
        {5,  6,  11, 1,  2,  9,  9,  2,  10, 9,  10, 8,  -1, -1, -1, -1},
        {6,  10, 3,  6,  3,  5,  5,  3,  1,  -1, -1, -1, -1, -1, -1, -1},
        {0,  10, 8,  0,  5,  10, 0,  1,  5,  5,  6,  10, -1, -1, -1, -1},
        {3,  6,  10, 0,  6,  3,  0,  5,  6,  0,  9,  5,  -1, -1, -1, -1},
        {6,  9,  5,  6,  10, 9,  10, 8,  9,  -1, -1, -1, -1, -1, -1, -1},
        {5,  6,  11, 4,  8,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  0,  3,  4,  3,  7,  6,  11, 5,  -1, -1, -1, -1, -1, -1, -1},
        {1,  0,  9,  5,  6,  11, 8,  7,  4,  -1, -1, -1, -1, -1, -1, -1},
        {11, 5,  6,  1,  7,  9,  1,  3,  7,  7,  4,  9,  -1, -1, -1, -1},
        {6,  2,  1,  6,  1,  5,  4,  8,  7,  -1, -1, -1, -1, -1, -1, -1},
        {1,  5,  2,  5,  6,  2,  3,  4,  0,  3,  7,  4,  -1, -1, -1, -1},
        {8,  7,  4,  9,  5,  0,  0,  5,  6,  0,  6,  2,  -1, -1, -1, -1},
        {7,  9,  3,  7,  4,  9,  3,  9,  2,  5,  6,  9,  2,  9,  6,  -1},
        {3,  2,  10, 7,  4,  8,  11, 5,  6,  -1, -1, -1, -1, -1, -1, -1},
        {5,  6,  11, 4,  2,  7,  4,  0,  2,  2,  10, 7,  -1, -1, -1, -1},
        {0,  9,  1,  4,  8,  7,  2,  10, 3,  5,  6,  11, -1, -1, -1, -1},
        {9,  1,  2,  9,  2,  10, 9,  10, 4,  7,  4,  10, 5,  6,  11, -1},
        {8,  7,  4,  3,  5,  10, 3,  1,  5,  5,  6,  10, -1, -1, -1, -1},
        {5,  10, 1,  5,  6,  10, 1,  10, 0,  7,  4,  10, 0,  10, 4,  -1},
        {0,  9,  5,  0,  5,  6,  0,  6,  3,  10, 3,  6,  8,  7,  4,  -1},
        {6,  9,  5,  6,  10, 9,  4,  9,  7,  7,  9,  10, -1, -1, -1, -1},
        {11, 9,  4,  6,  11, 4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  6,  11, 4,  11, 9,  0,  3,  8,  -1, -1, -1, -1, -1, -1, -1},
        {11, 1,  0,  11, 0,  6,  6,  0,  4,  -1, -1, -1, -1, -1, -1, -1},
        {8,  1,  3,  8,  6,  1,  8,  4,  6,  6,  11, 1,  -1, -1, -1, -1},
        {1,  9,  4,  1,  4,  2,  2,  4,  6,  -1, -1, -1, -1, -1, -1, -1},
        {3,  8,  0,  1,  9,  2,  2,  9,  4,  2,  4,  6,  -1, -1, -1, -1},
        {0,  4,  2,  4,  6,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8,  2,  3,  8,  4,  2,  4,  6,  2,  -1, -1, -1, -1, -1, -1, -1},
        {11, 9,  4,  11, 4,  6,  10, 3,  2,  -1, -1, -1, -1, -1, -1, -1},
        {0,  2,  8,  2,  10, 8,  4,  11, 9,  4,  6,  11, -1, -1, -1, -1},
        {3,  2,  10, 0,  6,  1,  0,  4,  6,  6,  11, 1,  -1, -1, -1, -1},
        {6,  1,  4,  6,  11, 1,  4,  1,  8,  2,  10, 1,  8,  1,  10, -1},
        {9,  4,  6,  9,  6,  3,  9,  3,  1,  10, 3,  6,  -1, -1, -1, -1},
        {8,  1,  10, 8,  0,  1,  10, 1,  6,  9,  4,  1,  6,  1,  4,  -1},
        {3,  6,  10, 3,  0,  6,  0,  4,  6,  -1, -1, -1, -1, -1, -1, -1},
        {6,  8,  4,  10, 8,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7,  6,  11, 7,  11, 8,  8,  11, 9,  -1, -1, -1, -1, -1, -1, -1},
        {0,  3,  7,  0,  7,  11, 0,  11, 9,  6,  11, 7,  -1, -1, -1, -1},
        {11, 7,  6,  1,  7,  11, 1,  8,  7,  1,  0,  8,  -1, -1, -1, -1},
        {11, 7,  6,  11, 1,  7,  1,  3,  7,  -1, -1, -1, -1, -1, -1, -1},
        {1,  6,  2,  1,  8,  6,  1,  9,  8,  8,  7,  6,  -1, -1, -1, -1},
        {2,  9,  6,  2,  1,  9,  6,  9,  7,  0,  3,  9,  7,  9,  3,  -1},
        {7,  0,  8,  7,  6,  0,  6,  2,  0,  -1, -1, -1, -1, -1, -1, -1},
        {7,  2,  3,  6,  2,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2,  10, 3,  11, 8,  6,  11, 9,  8,  8,  7,  6,  -1, -1, -1, -1},
        {2,  7,  0,  2,  10, 7,  0,  7,  9,  6,  11, 7,  9,  7,  11, -1},
        {1,  0,  8,  1,  8,  7,  1,  7,  11, 6,  11, 7,  2,  10, 3,  -1},
        {10, 1,  2,  10, 7,  1,  11, 1,  6,  6,  1,  7,  -1, -1, -1, -1},
        {8,  6,  9,  8,  7,  6,  9,  6,  1,  10, 3,  6,  1,  6,  3,  -1},
        {0,  1,  9,  10, 7,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7,  0,  8,  7,  6,  0,  3,  0,  10, 10, 0,  6,  -1, -1, -1, -1},
        {7,  6,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7,  10, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  8,  0,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  9,  1,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8,  9,  1,  8,  1,  3,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1},
        {11, 2,  1,  6,  7,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  11, 2,  3,  8,  0,  6,  7,  10, -1, -1, -1, -1, -1, -1, -1},
        {2,  0,  9,  2,  9,  11, 6,  7,  10, -1, -1, -1, -1, -1, -1, -1},
        {6,  7,  10, 2,  3,  11, 11, 3,  8,  11, 8,  9,  -1, -1, -1, -1},
        {7,  3,  2,  6,  7,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7,  8,  0,  7,  0,  6,  6,  0,  2,  -1, -1, -1, -1, -1, -1, -1},
        {2,  6,  7,  2,  7,  3,  0,  9,  1,  -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  6,  1,  6,  8,  1,  8,  9,  8,  6,  7,  -1, -1, -1, -1},
        {11, 6,  7,  11, 7,  1,  1,  7,  3,  -1, -1, -1, -1, -1, -1, -1},
        {11, 6,  7,  1,  11, 7,  1,  7,  8,  1,  8,  0,  -1, -1, -1, -1},
        {0,  7,  3,  0,  11, 7,  0,  9,  11, 6,  7,  11, -1, -1, -1, -1},
        {7,  11, 6,  7,  8,  11, 8,  9,  11, -1, -1, -1, -1, -1, -1, -1},
        {6,  4,  8,  10, 6,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  10, 6,  3,  6,  0,  0,  6,  4,  -1, -1, -1, -1, -1, -1, -1},
        {8,  10, 6,  8,  6,  4,  9,  1,  0,  -1, -1, -1, -1, -1, -1, -1},
        {9,  6,  4,  9,  3,  6,  9,  1,  3,  10, 6,  3,  -1, -1, -1, -1},
        {6,  4,  8,  6,  8,  10, 2,  1,  11, -1, -1, -1, -1, -1, -1, -1},
        {1,  11, 2,  3,  10, 0,  0,  10, 6,  0,  6,  4,  -1, -1, -1, -1},
        {4,  8,  10, 4,  10, 6,  0,  9,  2,  2,  9,  11, -1, -1, -1, -1},
        {11, 3,  9,  11, 2,  3,  9,  3,  4,  10, 6,  3,  4,  3,  6,  -1},
        {8,  3,  2,  8,  2,  4,  4,  2,  6,  -1, -1, -1, -1, -1, -1, -1},
        {0,  2,  4,  4,  2,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  0,  9,  2,  4,  3,  2,  6,  4,  4,  8,  3,  -1, -1, -1, -1},
        {1,  4,  9,  1,  2,  4,  2,  6,  4,  -1, -1, -1, -1, -1, -1, -1},
        {8,  3,  1,  8,  1,  6,  8,  6,  4,  6,  1,  11, -1, -1, -1, -1},
        {11, 0,  1,  11, 6,  0,  6,  4,  0,  -1, -1, -1, -1, -1, -1, -1},
        {4,  3,  6,  4,  8,  3,  6,  3,  11, 0,  9,  3,  11, 3,  9,  -1},
        {11, 4,  9,  6,  4,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  5,  9,  7,  10, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  3,  8,  4,  5,  9,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1},
        {5,  1,  0,  5,  0,  4,  7,  10, 6,  -1, -1, -1, -1, -1, -1, -1},
        {10, 6,  7,  8,  4,  3,  3,  4,  5,  3,  5,  1,  -1, -1, -1, -1},
        {9,  4,  5,  11, 2,  1,  7,  10, 6,  -1, -1, -1, -1, -1, -1, -1},
        {6,  7,  10, 1,  11, 2,  0,  3,  8,  4,  5,  9,  -1, -1, -1, -1},
        {7,  10, 6,  5,  11, 4,  4,  11, 2,  4,  2,  0,  -1, -1, -1, -1},
        {3,  8,  4,  3,  4,  5,  3,  5,  2,  11, 2,  5,  10, 6,  7,  -1},
        {7,  3,  2,  7,  2,  6,  5,  9,  4,  -1, -1, -1, -1, -1, -1, -1},
        {9,  4,  5,  0,  6,  8,  0,  2,  6,  6,  7,  8,  -1, -1, -1, -1},
        {3,  2,  6,  3,  6,  7,  1,  0,  5,  5,  0,  4,  -1, -1, -1, -1},
        {6,  8,  2,  6,  7,  8,  2,  8,  1,  4,  5,  8,  1,  8,  5,  -1},
        {9,  4,  5,  11, 6,  1,  1,  6,  7,  1,  7,  3,  -1, -1, -1, -1},
        {1,  11, 6,  1,  6,  7,  1,  7,  0,  8,  0,  7,  9,  4,  5,  -1},
        {4,  11, 0,  4,  5,  11, 0,  11, 3,  6,  7,  11, 3,  11, 7,  -1},
        {7,  11, 6,  7,  8,  11, 5,  11, 4,  4,  11, 8,  -1, -1, -1, -1},
        {6,  5,  9,  6,  9,  10, 10, 9,  8,  -1, -1, -1, -1, -1, -1, -1},
        {3,  10, 6,  0,  3,  6,  0,  6,  5,  0,  5,  9,  -1, -1, -1, -1},
        {0,  8,  10, 0,  10, 5,  0,  5,  1,  5,  10, 6,  -1, -1, -1, -1},
        {6,  3,  10, 6,  5,  3,  5,  1,  3,  -1, -1, -1, -1, -1, -1, -1},
        {1,  11, 2,  9,  10, 5,  9,  8,  10, 10, 6,  5,  -1, -1, -1, -1},
        {0,  3,  10, 0,  10, 6,  0,  6,  9,  5,  9,  6,  1,  11, 2,  -1},
        {10, 5,  8,  10, 6,  5,  8,  5,  0,  11, 2,  5,  0,  5,  2,  -1},
        {6,  3,  10, 6,  5,  3,  2,  3,  11, 11, 3,  5,  -1, -1, -1, -1},
        {5,  9,  8,  5,  8,  2,  5,  2,  6,  3,  2,  8,  -1, -1, -1, -1},
        {9,  6,  5,  9,  0,  6,  0,  2,  6,  -1, -1, -1, -1, -1, -1, -1},
        {1,  8,  5,  1,  0,  8,  5,  8,  6,  3,  2,  8,  6,  8,  2,  -1},
        {1,  6,  5,  2,  6,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  6,  3,  1,  11, 6,  3,  6,  8,  5,  9,  6,  8,  6,  9,  -1},
        {11, 0,  1,  11, 6,  0,  9,  0,  5,  5,  0,  6,  -1, -1, -1, -1},
        {0,  8,  3,  5,  11, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {11, 6,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {10, 11, 5,  7,  10, 5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {10, 11, 5,  10, 5,  7,  8,  0,  3,  -1, -1, -1, -1, -1, -1, -1},
        {5,  7,  10, 5,  10, 11, 1,  0,  9,  -1, -1, -1, -1, -1, -1, -1},
        {11, 5,  7,  11, 7,  10, 9,  1,  8,  8,  1,  3,  -1, -1, -1, -1},
        {10, 2,  1,  10, 1,  7,  7,  1,  5,  -1, -1, -1, -1, -1, -1, -1},
        {0,  3,  8,  1,  7,  2,  1,  5,  7,  7,  10, 2,  -1, -1, -1, -1},
        {9,  5,  7,  9,  7,  2,  9,  2,  0,  2,  7,  10, -1, -1, -1, -1},
        {7,  2,  5,  7,  10, 2,  5,  2,  9,  3,  8,  2,  9,  2,  8,  -1},
        {2,  11, 5,  2,  5,  3,  3,  5,  7,  -1, -1, -1, -1, -1, -1, -1},
        {8,  0,  2,  8,  2,  5,  8,  5,  7,  11, 5,  2,  -1, -1, -1, -1},
        {9,  1,  0,  5,  3,  11, 5,  7,  3,  3,  2,  11, -1, -1, -1, -1},
        {9,  2,  8,  9,  1,  2,  8,  2,  7,  11, 5,  2,  7,  2,  5,  -1},
        {1,  5,  3,  3,  5,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  7,  8,  0,  1,  7,  1,  5,  7,  -1, -1, -1, -1, -1, -1, -1},
        {9,  3,  0,  9,  5,  3,  5,  7,  3,  -1, -1, -1, -1, -1, -1, -1},
        {9,  7,  8,  5,  7,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {5,  4,  8,  5,  8,  11, 11, 8,  10, -1, -1, -1, -1, -1, -1, -1},
        {5,  4,  0,  5,  0,  10, 5,  10, 11, 10, 0,  3,  -1, -1, -1, -1},
        {0,  9,  1,  8,  11, 4,  8,  10, 11, 11, 5,  4,  -1, -1, -1, -1},
        {11, 4,  10, 11, 5,  4,  10, 4,  3,  9,  1,  4,  3,  4,  1,  -1},
        {2,  1,  5,  2,  5,  8,  2,  8,  10, 4,  8,  5,  -1, -1, -1, -1},
        {0,  10, 4,  0,  3,  10, 4,  10, 5,  2,  1,  10, 5,  10, 1,  -1},
        {0,  5,  2,  0,  9,  5,  2,  5,  10, 4,  8,  5,  10, 5,  8,  -1},
        {9,  5,  4,  2,  3,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2,  11, 5,  3,  2,  5,  3,  5,  4,  3,  4,  8,  -1, -1, -1, -1},
        {5,  2,  11, 5,  4,  2,  4,  0,  2,  -1, -1, -1, -1, -1, -1, -1},
        {3,  2,  11, 3,  11, 5,  3,  5,  8,  4,  8,  5,  0,  9,  1,  -1},
        {5,  2,  11, 5,  4,  2,  1,  2,  9,  9,  2,  4,  -1, -1, -1, -1},
        {8,  5,  4,  8,  3,  5,  3,  1,  5,  -1, -1, -1, -1, -1, -1, -1},
        {0,  5,  4,  1,  5,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8,  5,  4,  8,  3,  5,  9,  5,  0,  0,  5,  3,  -1, -1, -1, -1},
        {9,  5,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  7,  10, 4,  10, 9,  9,  10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0,  3,  8,  4,  7,  9,  9,  7,  10, 9,  10, 11, -1, -1, -1, -1},
        {1,  10, 11, 1,  4,  10, 1,  0,  4,  7,  10, 4,  -1, -1, -1, -1},
        {3,  4,  1,  3,  8,  4,  1,  4,  11, 7,  10, 4,  11, 4,  10, -1},
        {4,  7,  10, 9,  4,  10, 9,  10, 2,  9,  2,  1,  -1, -1, -1, -1},
        {9,  4,  7,  9,  7,  10, 9,  10, 1,  2,  1,  10, 0,  3,  8,  -1},
        {10, 4,  7,  10, 2,  4,  2,  0,  4,  -1, -1, -1, -1, -1, -1, -1},
        {10, 4,  7,  10, 2,  4,  8,  4,  3,  3,  4,  2,  -1, -1, -1, -1},
        {2,  11, 9,  2,  9,  7,  2,  7,  3,  7,  9,  4,  -1, -1, -1, -1},
        {9,  7,  11, 9,  4,  7,  11, 7,  2,  8,  0,  7,  2,  7,  0,  -1},
        {3,  11, 7,  3,  2,  11, 7,  11, 4,  1,  0,  11, 4,  11, 0,  -1},
        {1,  2,  11, 8,  4,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  1,  9,  4,  7,  1,  7,  3,  1,  -1, -1, -1, -1, -1, -1, -1},
        {4,  1,  9,  4,  7,  1,  0,  1,  8,  8,  1,  7,  -1, -1, -1, -1},
        {4,  3,  0,  7,  3,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  7,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  8,  11, 11, 8,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  9,  0,  3,  10, 9,  10, 11, 9,  -1, -1, -1, -1, -1, -1, -1},
        {0,  11, 1,  0,  8,  11, 8,  10, 11, -1, -1, -1, -1, -1, -1, -1},
        {3,  11, 1,  10, 11, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  10, 2,  1,  9,  10, 9,  8,  10, -1, -1, -1, -1, -1, -1, -1},
        {3,  9,  0,  3,  10, 9,  1,  9,  2,  2,  9,  10, -1, -1, -1, -1},
        {0,  10, 2,  8,  10, 0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  10, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2,  8,  3,  2,  11, 8,  11, 9,  8,  -1, -1, -1, -1, -1, -1, -1},
        {9,  2,  11, 0,  2,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2,  8,  3,  2,  11, 8,  0,  8,  1,  1,  8,  11, -1, -1, -1, -1},
        {1,  2,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  8,  3,  9,  8,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  1,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
};
__constant__ unsigned int edgeVertices[12][2] = {
        {0, 1}, {1, 2}, {3, 2}, {0, 3},
        {4, 5}, {5, 6}, {7, 6}, {4, 7},
        {0, 4}, {1, 5}, {3, 7}, {2, 6}
};

// Constructor
FlyingEdgesAlgorithm::FlyingEdgesAlgorithm(float *h_scalars, float isovalue, dim3 dataShape)
        : isovalue(isovalue), dataShape(dataShape) {
    size_t numElements = dataShape.x * dataShape.y * dataShape.z;
    totalVoxels = (dataShape.x - 1) * (dataShape.y - 1) * (dataShape.z - 1);

    // Allocate device memory
    CHECK_CUDA(cudaMalloc(&d_scalars, numElements * sizeof(float)));
    CHECK_CUDA(cudaMalloc(&d_edgeCases, (dataShape.x - 1) * dataShape.y * dataShape.z * sizeof(int)));
    CHECK_CUDA(cudaMalloc(&d_cubeCases, totalVoxels * sizeof(int)));
    CHECK_CUDA(cudaMalloc(&d_leftTrim, dataShape.y * dataShape.z * sizeof(int)));
    CHECK_CUDA(cudaMalloc(&d_rightTrim, dataShape.y * dataShape.z * sizeof(int)));
    CHECK_CUDA(cudaMalloc(&d_leftTrim_c, (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int)));
    CHECK_CUDA(cudaMalloc(&d_rightTrim_c, (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int)));
    CHECK_CUDA(cudaMalloc(&d_triCount, ((dataShape.y - 1) * (dataShape.z - 1)) * sizeof(int)));
    CHECK_CUDA(cudaMalloc(&d_triOffsets, totalVoxels * sizeof(int)));

    // Copy scalars to device
    CHECK_CUDA(cudaMemcpy(d_scalars, h_scalars, numElements * sizeof(float), cudaMemcpyHostToDevice));
}

// Destructor
FlyingEdgesAlgorithm::~FlyingEdgesAlgorithm() {
    // Free device memory
    cudaFree(d_scalars);
    cudaFree(d_edgeCases);
    cudaFree(d_cubeCases);
    cudaFree(d_leftTrim);
    cudaFree(d_rightTrim);
    cudaFree(d_leftTrim_c);
    cudaFree(d_rightTrim_c);
    cudaFree(d_triCount);
    cudaFree(d_triOffsets);
    cudaFree(d_vertices);
    cudaFree(d_triangles);
}

// Device functions and kernels
template<typename T>
__device__ int FlyingEdgesAlgorithm::calculateEdgeCase(T left, T right, T isovalue) {
    int flag = ((right < isovalue) << 1) | (left < isovalue);
    return flag;
}

template<typename T>
__global__ void calculateEdgeCases(T *scalars, T isovalue, int *edgeCases, dim3 dataShape) {
    int x = blockIdx.x * blockDim.x + threadIdx.x;
    int y = blockIdx.y;
    int z = blockIdx.z;

    if (x >= (dataShape.x - 1) || y > (dataShape.y - 1) || z > (dataShape.z - 1)) {
        return;
    }

    int baseIdx = y * dataShape.x + z * dataShape.x * dataShape.y;

    T left = scalars[baseIdx + x];
    T right = scalars[baseIdx + x + 1];

    int edgeCase = FlyingEdgesAlgorithm::calculateEdgeCase<T>(left, right, isovalue);

    int edgeIndex = x + y * (dataShape.x - 1) + z * (dataShape.x - 1) * dataShape.y;
    edgeCases[edgeIndex] = edgeCase;
}

__global__ void calculateTrimPositions(int *edgeCases, int *leftTrim, int *rightTrim, dim3 dataShape) {
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (j > (dataShape.y - 1) || k > (dataShape.z - 1)) {
        return;
    }

    int xL = dataShape.x - 1;
    int xR = -1;
    bool found = false;

    for (int i = 0; i < (dataShape.x - 1); ++i) {
        int edgeCase = edgeCases[i + j * (dataShape.x - 1) + k * (dataShape.x - 1) * dataShape.y];
        if (edgeCase == 1 || edgeCase == 2) {
            xL = min(xL, i);
            xR = max(xR, i);
            found = true;
        }
    }

    int index = j + k * dataShape.y;
    if (found) {
        leftTrim[index] = xL;
        rightTrim[index] = xR + 1;
    } else {
        leftTrim[index] = -1;
        rightTrim[index] = -1;
    }
}

__device__ int FlyingEdgesAlgorithm::getCubeCase(int ec0, int ec1, int ec2, int ec3) {
    unsigned int caseId = 0;
    caseId |= ((ec0 == 0) | (ec0 == 2)) << 0;
    caseId |= ((ec0 == 0) | (ec0 == 1)) << 1;
    caseId |= ((ec1 == 0) | (ec1 == 1)) << 2;
    caseId |= ((ec1 == 0) | (ec1 == 2)) << 3;
    caseId |= ((ec2 == 0) | (ec2 == 2)) << 4;
    caseId |= ((ec2 == 0) | (ec2 == 1)) << 5;
    caseId |= ((ec3 == 0) | (ec3 == 1)) << 6;
    caseId |= ((ec3 == 0) | (ec3 == 2)) << 7;
    return caseId;
}

__global__ void getCubeCases(const int *edgeCases, const int *leftTrim, const int *rightTrim,
                             int *triCount, int *cubeCases, int *left_c, int *right_c, dim3 dataShape) {
    const int j = blockIdx.y * blockDim.y + threadIdx.y;
    const int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (j >= (dataShape.y - 1) || k >= (dataShape.z - 1)) {
        return;
    }

    const int jk = j + k * dataShape.y;
    const int jk_cube = j + k * (dataShape.y - 1);

    left_c[jk_cube] = min(min(leftTrim[jk], leftTrim[jk + 1]),
                          min(leftTrim[jk + dataShape.y], leftTrim[jk + dataShape.y + 1]));
    right_c[jk_cube] = min(min(rightTrim[jk], rightTrim[jk + 1]),
                           min(rightTrim[jk + dataShape.y], rightTrim[jk + dataShape.y + 1]));

    const int left = left_c[jk_cube];
    const int right = right_c[jk_cube];

    int localTriCount = 0;
    const int base_idx = j * (dataShape.x - 1) + k * (dataShape.x - 1) * dataShape.y;

    for (int i = left; i < right; ++i) {
        const int idx = i + base_idx;
        const int ec0 = edgeCases[idx];
        const int ec1 = edgeCases[idx + (dataShape.x - 1)];
        const int ec2 = edgeCases[idx + (dataShape.x - 1) * dataShape.y];
        const int ec3 = edgeCases[idx + (dataShape.x - 1) * dataShape.y + (dataShape.x - 1)];

        const unsigned char cubeCase = FlyingEdgesAlgorithm::getCubeCase(ec0, ec1, ec2, ec3);
        cubeCases[i + j * (dataShape.x - 1) + k * (dataShape.x - 1) * (dataShape.y - 1)] = cubeCase;
        localTriCount += numTris[cubeCase];
    }

    triCount[jk_cube] = localTriCount;
}

__global__ void getCubeTris(int *cubeCases, int *d_tri_nums, dim3 dataShape) {
    int x = threadIdx.x;
    int y = blockIdx.x;
    int z = blockIdx.y;

    int index = x + y * (dataShape.x - 1) + z * (dataShape.x - 1) * (dataShape.y - 1);
    d_tri_nums[index] = numTris[cubeCases[index]];
}

template<typename T>
__device__ void FlyingEdgesAlgorithm::interpolateVertex(float *vert, T isovalue,
                                                        float x1, float y1, float z1, T val1,
                                                        float x2, float y2, float z2, T val2) {
    float mu = static_cast<float>(isovalue - val1) / static_cast<float>(val2 - val1);
    vert[0] = x1 + mu * (x2 - x1);
    vert[1] = y1 + mu * (y2 - y1);
    vert[2] = z1 + mu * (z2 - z1);
}

template<typename T>
__global__ void Pass4Kernel(const T *scalars, const int *cubeCases, const int *triOffsets,
                            Vertex *vertices, Triangle *triangles, T isovalue, dim3 dataShape) {
    int x = blockIdx.x * blockDim.x + threadIdx.x;
    int y = blockIdx.y * blockDim.y + threadIdx.y;
    int z = blockIdx.z * blockDim.z + threadIdx.z;

    if (x >= (dataShape.x - 1) || y >= (dataShape.y - 1) || z >= (dataShape.z - 1)) {
        return;
    }

    int voxelIndex = x + y * (dataShape.x - 1) + z * (dataShape.x - 1) * (dataShape.y - 1);
    int cubeCase = cubeCases[voxelIndex];
    int triOffset = triOffsets[voxelIndex];
    int nextTriOffset = (voxelIndex < (dataShape.x - 1) * (dataShape.y - 1) * (dataShape.z - 1) - 1)
                        ? triOffsets[voxelIndex + 1]
                        : triOffsets[voxelIndex];
    int numTriangles = nextTriOffset - triOffset;

    if (numTriangles == 0) {
        return;
    }

    float cubeVertices[8][3] = {
            {static_cast<float>(x),     static_cast<float>(y),     static_cast<float>(z)},
            {static_cast<float>(x + 1), static_cast<float>(y),     static_cast<float>(z)},
            {static_cast<float>(x + 1), static_cast<float>(y + 1), static_cast<float>(z)},
            {static_cast<float>(x),     static_cast<float>(y + 1), static_cast<float>(z)},
            {static_cast<float>(x),     static_cast<float>(y),     static_cast<float>(z + 1)},
            {static_cast<float>(x + 1), static_cast<float>(y),     static_cast<float>(z + 1)},
            {static_cast<float>(x + 1), static_cast<float>(y + 1), static_cast<float>(z + 1)},
            {static_cast<float>(x),     static_cast<float>(y + 1), static_cast<float>(z + 1)}
    };

    float vertList[12][3];

    for (int i = 0; i < 12; ++i) {
        if (isCut[cubeCase][i]) {
            int v1 = edgeVertices[i][0];
            int v2 = edgeVertices[i][1];
            int idx1 = (z + (v1 >> 2)) * dataShape.x * dataShape.y + (y + ((v1 & 2) >> 1)) * dataShape.x + (x + (v1 & 1));
            int idx2 = (z + (v2 >> 2)) * dataShape.x * dataShape.y + (y + ((v2 & 2) >> 1)) * dataShape.x + (x + (v2 & 1));

            FlyingEdgesAlgorithm::interpolateVertex(
                    vertList[i], isovalue,
                    cubeVertices[v1][0], cubeVertices[v1][1], cubeVertices[v1][2], scalars[idx1],
                    cubeVertices[v2][0], cubeVertices[v2][1], cubeVertices[v2][2], scalars[idx2]
            );
        }
    }

    for (int i = 0; i < numTriangles; ++i) {
        int triIndex = triOffset + i;
        int vertIndex = triIndex * 3;

        for (int j = 0; j < 3; ++j) {
            int edgeIndex = caseTriangles[cubeCase][i * 3 + j];
            vertices[vertIndex + j].x = vertList[edgeIndex][0];
            vertices[vertIndex + j].y = vertList[edgeIndex][1];
            vertices[vertIndex + j].z = vertList[edgeIndex][2];
        }

        triangles[triIndex].v1 = vertIndex;
        triangles[triIndex].v2 = vertIndex + 1;
        triangles[triIndex].v3 = vertIndex + 2;
    }
}

// Member functions
template<typename T>
void FlyingEdgesAlgorithm::Pass1(T *scalars, T isovalue, int *edgeCases, int *leftTrim, int *rightTrim, dim3 dataShape) {
    dim3 threadsPerBlock(dataShape.x - 1, 1, 1);
    dim3 blocksPerGrid(1, dataShape.y, dataShape.z);

    calculateEdgeCases<<<blocksPerGrid, threadsPerBlock>>>(scalars, isovalue, edgeCases, dataShape);
    cudaDeviceSynchronize();

    dim3 trimThreadsPerBlock(1, 32, 32);
    dim3 trimBlocksPerGrid(1, ((dataShape.y + trimThreadsPerBlock.y - 1) / trimThreadsPerBlock.y),
                           ((dataShape.z + trimThreadsPerBlock.z - 1) / trimThreadsPerBlock.z));

    calculateTrimPositions<<<trimBlocksPerGrid, trimThreadsPerBlock>>>(edgeCases, leftTrim, rightTrim, dataShape);
    cudaDeviceSynchronize();
}

void FlyingEdgesAlgorithm::Pass2(int *d_edgeCases, int *d_leftTrim, int *d_rightTrim, int *d_triCount,
                                 int *d_cubeCases, int *d_left_c, int *d_right_c, dim3 dataShape) {
    dim3 threadsPerBlock(1, 32, 32);
    dim3 blocksPerGrid(1, (dataShape.y - 1 + threadsPerBlock.y - 1) / threadsPerBlock.y,
                       (dataShape.z - 1 + threadsPerBlock.z - 1) / threadsPerBlock.z);

    getCubeCases<<<blocksPerGrid, threadsPerBlock>>>(d_edgeCases, d_leftTrim, d_rightTrim, d_triCount,
                                                     d_cubeCases, d_left_c, d_right_c, dataShape);
    cudaDeviceSynchronize();
}

void FlyingEdgesAlgorithm::Pass3(int *d_cubeCases, int *d_triOffsets, dim3 dataShape) {
    int column_size = dataShape.x - 1;
    int num_columns = (dataShape.y - 1) * (dataShape.z - 1);
    int totalElements = column_size * num_columns;

    dim3 threadsPerBlock(column_size, 1, 1);
    dim3 blocksPerGrid((dataShape.y - 1), (dataShape.z - 1), 1);

    int *d_tri_nums;
    cudaMalloc(&d_tri_nums, totalElements * sizeof(int));

    getCubeTris<<<blocksPerGrid, threadsPerBlock>>>(d_cubeCases, d_tri_nums, dataShape);

    void *d_temp_storage = NULL;
    size_t temp_storage_bytes = 0;

    cub::DeviceScan::ExclusiveSum(d_temp_storage, temp_storage_bytes, d_tri_nums, d_triOffsets, totalElements);

    cudaMalloc(&d_temp_storage, temp_storage_bytes);

    cub::DeviceScan::ExclusiveSum(d_temp_storage, temp_storage_bytes, d_tri_nums, d_triOffsets, totalElements);

    cudaFree(d_temp_storage);
    cudaFree(d_tri_nums);
}

template<typename T>
void FlyingEdgesAlgorithm::Pass4(const T *d_scalars, const int *d_cubeCases, const int *d_triOffsets,
                                 Vertex *d_vertices, Triangle *d_triangles, T isovalue, dim3 dataShape) {
    dim3 blockSize(8, 8, 8);
    dim3 gridSize(
            (dataShape.x - 1 + blockSize.x - 1) / blockSize.x,
            (dataShape.y - 1 + blockSize.y - 1) / blockSize.y,
            (dataShape.z - 1 + blockSize.z - 1) / blockSize.z
    );

    Pass4Kernel<<<gridSize, blockSize>>>(d_scalars, d_cubeCases, d_triOffsets, d_vertices, d_triangles, isovalue, dataShape);

    cudaError_t err = cudaGetLastError();
    if (err != cudaSuccess) {
        std::cerr << "CUDA Error in Pass4Kernel launch: " << cudaGetErrorString(err) << std::endl;
        return;
    }

    err = cudaDeviceSynchronize();
    if (err != cudaSuccess) {
        std::cerr << "CUDA Error in Pass4Kernel execution: " << cudaGetErrorString(err) << std::endl;
        return;
    }
}

void FlyingEdgesAlgorithm::execute() {
    // Execute Pass1
    Pass1<float>(d_scalars, isovalue, d_edgeCases, d_leftTrim, d_rightTrim, dataShape);

    // Execute Pass2
    Pass2(d_edgeCases, d_leftTrim, d_rightTrim, d_triCount, d_cubeCases, d_leftTrim_c, d_rightTrim_c, dataShape);

    // Execute Pass3
    Pass3(d_cubeCases, d_triOffsets, dataShape);
    cudaDeviceSynchronize();

    // Get total number of triangles
    cudaMemcpy(&totalTriangles, d_triOffsets + totalVoxels - 1, sizeof(int), cudaMemcpyDeviceToHost);

    totalVertices = totalTriangles * 3;

    // Allocate memory for vertices and triangles
    CHECK_CUDA(cudaMalloc(&d_vertices, totalVertices * sizeof(Vertex)));
    CHECK_CUDA(cudaMalloc(&d_triangles, totalTriangles * sizeof(Triangle)));

    // Execute Pass4
    Pass4(d_scalars, d_cubeCases, d_triOffsets, d_vertices, d_triangles, isovalue, dataShape);
}

void FlyingEdgesAlgorithm::saveResultsToOBJ(const std::string &filename) {
    // Allocate host memory
    std::vector<Vertex> h_vertices(totalVertices);
    std::vector<Triangle> h_triangles(totalTriangles);

    // Copy data from device to host
    cudaMemcpy(h_vertices.data(), d_vertices, totalVertices * sizeof(Vertex), cudaMemcpyDeviceToHost);
    cudaMemcpy(h_triangles.data(), d_triangles, totalTriangles * sizeof(Triangle), cudaMemcpyDeviceToHost);

    // Output to OBJ file
    std::ofstream outFile(filename);
    if (!outFile.is_open()) {
        std::cerr << "Error: Unable to open file " << filename << " for writing." << std::endl;
        return;
    }

    // Write vertices
    for (const auto &vertex : h_vertices) {
        outFile << "v " << vertex.x << " " << vertex.y << " " << vertex.z << "\n";
    }

    // Write faces (triangles)
    for (const auto &triangle : h_triangles) {
        outFile << "f " << (triangle.v1 + 1) << " " << (triangle.v2 + 1) << " " << (triangle.v3 + 1) << "\n";
    }

    outFile.close();
    std::cout << "OBJ file written successfully: " << filename << std::endl;
}
